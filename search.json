[
  {
    "objectID": "iBridgesGui-HowTo.html",
    "href": "iBridgesGui-HowTo.html",
    "title": "iBridgesGui - How To?",
    "section": "",
    "text": "The iBridgesGui is a GUI to an Data management platform based on iRODS. It exposes iRODS functionality through a GUI to the users. We divided the different function into groups where each function group is represented in an own tab in the GUI. The tabs are configured for the user depending on the user’s rights and role in the Data management platform. - The Browser is a tool to browse through iRODS collections and gather information on iRODS data objects - The Up and Download tab gives tools to up and download large data safely. - The ELN Data upload tab is made for specific data uploads that belong to an Experiment described in an ElabJournal instance. - In the Compress/bundle data tab the user is given tools to bundle (tar) or compress (zip) iRODS data collections and to extract them again.\n\n\n\n\n\nHow to Download\n\n\nTo browse through your data collections in iRODS click on the Browser tab.\n\nNavigation bar: Type a valid collection or object path in and hit enter.\nCollection and data object table:\n\nClick on the Name of a collection or option. This will load the tabs below the table (see below)\nDouble click on a collection to navigate into the collection\n\nLower tabs\n\nPreview: Lists the content of a collection or the first 50 lines of textual data (.txt, .json, .csv)\nMetadata: You can annotate collections and data objects with own annotation key, value, unit. The keys and values can be used in the search-drop down menu to look for data\nPermissions: Will show the permissions own(er), read, write. If you have the role of data steward, you will also be able to change and add permissions\nResources: The tab shows on which storage resource data objects are stored. Note, collections do not have a resource.\nDelete: In the browser table click on the collection or object you want to delete, then click Load and then Delete. This will delete a whole collection with all its members or the data object.\n\n\nNote: The File Upload and File download buttons are only meant for uploading and downloading small single files. For large data transfers click on the Up and Download tab.\n\n\n\n\n\nHow to Download\n\n\n\nSelect the iRODS collection or data object to download and the folder to download to.\nPress the download button. A pop up window opens and the difference between the source and destination is calculated: - Based on checksums, a unique hash for each file the GUI determines whether the source file and the destination file are identical. If so, the file will not be downloaded again. The GUI will only download data which does not exist or differs.\n\nThe GUI also computes the total size of the data objects and will only start the download if the total amount will fit on your destination file system.\n\n\n\n\n\nDownload dialog\n\n\nWhen the check is done the loading screen disappears and the number of files which exist with a different checksum (1) and files which only exist on iRODS (2) will be indicated. Press the Download button to start the file transfer. iRODS automatically checks the checksum to ensure all downloaded files are complete.\n\n\n\n\n\n\n\nHow to Download\n\n\n\nCheck the resource. There may be several storage resources configured for you in the system. Your iRODS admin will give you advice which one to use for which data and workflow. Note, that archive resources are made to archive large files. Please adhere for those resources to the following policy:\n\nFiles need to be 1GB or larger.\nDo not start calculations on data which is stored on archive resources. They have a low latency and will inhibit your program. Your iRODS administrator can help you to migrate the data to a suited resources in that case.\n\nSelect the local file or folder and iRODS collection to upload to.\nPress the upload button. As in the download, a pop up window will appear which will execute the same checks as for the data downloads.\n\n\n\n\nDownload dialog\n\n\n\n\n\nYou can bundle a collection that contains small files into one large tar file or even compress a collection into a zip file. Those files can then be safely put on the archive resources or, in case of zip, be used to reduce storage space.\n\n\n\nHow to Compress\n\n\n\nSelect the collection you want to compress\nSelect the storage resource on which the compressed or bundled data should be stored\nCheck Compress data to create a zip-file. If unchecked, a tar-file will be created\nCheck Remove collection if you just want to keep the tar or zip file.\nThe Create tar/zip compress the data into the file &lt;collection_name&gt;.irods.tar or &lt;collection_name&gt;.irods.zip\n\nNote, all you metadata will be preserved too and restored upon extraction.\n\n\n\n\n\n\nHow to Compress\n\n\nPartial extract of data:\n\nSelect the *.irods.tar or *.irods.zip file.\nSelect the resource where the data should be extracted to.\nUse the Index button to get an overview of the files inside the tarred file. The JSON tab will show the whole data package in JSON format including accession rights and metadata. Select the files you want to extract and click on Extract Selected. This schedules a job on the iRODS server which will extract the data. Note, that this might take a while. Close the window and navigate to the browser to see whether the data is restored.\n\n\n\nClick on Options in the menu bar of the window and select Search. This will open a mask to search for data objects and collections using metadata key-value pairs, collection paths and data object paths.\nThe Select and Close button will load the selected collections and objects into the Browser tab where you can further inspect and annotate the data."
  },
  {
    "objectID": "iBridgesGui-HowTo.html#how-to-do-simple-data-operations",
    "href": "iBridgesGui-HowTo.html#how-to-do-simple-data-operations",
    "title": "iBridgesGui - How To?",
    "section": "",
    "text": "How to Download\n\n\nTo browse through your data collections in iRODS click on the Browser tab.\n\nNavigation bar: Type a valid collection or object path in and hit enter.\nCollection and data object table:\n\nClick on the Name of a collection or option. This will load the tabs below the table (see below)\nDouble click on a collection to navigate into the collection\n\nLower tabs\n\nPreview: Lists the content of a collection or the first 50 lines of textual data (.txt, .json, .csv)\nMetadata: You can annotate collections and data objects with own annotation key, value, unit. The keys and values can be used in the search-drop down menu to look for data\nPermissions: Will show the permissions own(er), read, write. If you have the role of data steward, you will also be able to change and add permissions\nResources: The tab shows on which storage resource data objects are stored. Note, collections do not have a resource.\nDelete: In the browser table click on the collection or object you want to delete, then click Load and then Delete. This will delete a whole collection with all its members or the data object.\n\n\nNote: The File Upload and File download buttons are only meant for uploading and downloading small single files. For large data transfers click on the Up and Download tab.\n\n\n\n\n\nHow to Download\n\n\n\nSelect the iRODS collection or data object to download and the folder to download to.\nPress the download button. A pop up window opens and the difference between the source and destination is calculated: - Based on checksums, a unique hash for each file the GUI determines whether the source file and the destination file are identical. If so, the file will not be downloaded again. The GUI will only download data which does not exist or differs.\n\nThe GUI also computes the total size of the data objects and will only start the download if the total amount will fit on your destination file system.\n\n\n\n\n\nDownload dialog\n\n\nWhen the check is done the loading screen disappears and the number of files which exist with a different checksum (1) and files which only exist on iRODS (2) will be indicated. Press the Download button to start the file transfer. iRODS automatically checks the checksum to ensure all downloaded files are complete."
  },
  {
    "objectID": "iBridgesGui-HowTo.html#how-to-upload-data",
    "href": "iBridgesGui-HowTo.html#how-to-upload-data",
    "title": "iBridgesGui - How To?",
    "section": "",
    "text": "How to Download\n\n\n\nCheck the resource. There may be several storage resources configured for you in the system. Your iRODS admin will give you advice which one to use for which data and workflow. Note, that archive resources are made to archive large files. Please adhere for those resources to the following policy:\n\nFiles need to be 1GB or larger.\nDo not start calculations on data which is stored on archive resources. They have a low latency and will inhibit your program. Your iRODS administrator can help you to migrate the data to a suited resources in that case.\n\nSelect the local file or folder and iRODS collection to upload to.\nPress the upload button. As in the download, a pop up window will appear which will execute the same checks as for the data downloads.\n\n\n\n\nDownload dialog"
  },
  {
    "objectID": "iBridgesGui-HowTo.html#how-to-bundle-data-or-compress-data",
    "href": "iBridgesGui-HowTo.html#how-to-bundle-data-or-compress-data",
    "title": "iBridgesGui - How To?",
    "section": "",
    "text": "You can bundle a collection that contains small files into one large tar file or even compress a collection into a zip file. Those files can then be safely put on the archive resources or, in case of zip, be used to reduce storage space.\n\n\n\nHow to Compress\n\n\n\nSelect the collection you want to compress\nSelect the storage resource on which the compressed or bundled data should be stored\nCheck Compress data to create a zip-file. If unchecked, a tar-file will be created\nCheck Remove collection if you just want to keep the tar or zip file.\nThe Create tar/zip compress the data into the file &lt;collection_name&gt;.irods.tar or &lt;collection_name&gt;.irods.zip\n\nNote, all you metadata will be preserved too and restored upon extraction."
  },
  {
    "objectID": "iBridgesGui-HowTo.html#how-to-decompress-data",
    "href": "iBridgesGui-HowTo.html#how-to-decompress-data",
    "title": "iBridgesGui - How To?",
    "section": "",
    "text": "How to Compress\n\n\nPartial extract of data:\n\nSelect the *.irods.tar or *.irods.zip file.\nSelect the resource where the data should be extracted to.\nUse the Index button to get an overview of the files inside the tarred file. The JSON tab will show the whole data package in JSON format including accession rights and metadata. Select the files you want to extract and click on Extract Selected. This schedules a job on the iRODS server which will extract the data. Note, that this might take a while. Close the window and navigate to the browser to see whether the data is restored.\n\n\n\nClick on Options in the menu bar of the window and select Search. This will open a mask to search for data objects and collections using metadata key-value pairs, collection paths and data object paths.\nThe Select and Close button will load the selected collections and objects into the Browser tab where you can further inspect and annotate the data."
  },
  {
    "objectID": "docs/getting-started.html",
    "href": "docs/getting-started.html",
    "title": "iBridges configuration",
    "section": "",
    "text": "The iRODS GUI works with iRODS instances of versions 4.2.11, 4.2.12 and 4.3.0.\nHere, we show how to configure the application to work your specific iRODS instance. Please note, that some features (tab views in the GUI) depend on certain server settings. You will find those dependencies at the end of the document."
  },
  {
    "objectID": "docs/getting-started.html#system-dependencies",
    "href": "docs/getting-started.html#system-dependencies",
    "title": "iBridges configuration",
    "section": "System dependencies",
    "text": "System dependencies\n\nPython: you will need Python 3.9 or higher\npip: to install package dependencies you will need pip3, version 22.2.2 or higher"
  },
  {
    "objectID": "docs/getting-started.html#installation",
    "href": "docs/getting-started.html#installation",
    "title": "iBridges configuration",
    "section": "Installation",
    "text": "Installation\n\n\n\n\n\n\nInstall from git\n\n\n\n\n\ngit clone git@github.com:chStaiger/iBridges-Gui.git\ncd iBridges-Gui\npython -m pip install -r requirements.txt\nYou can already start the application with\n./iBridges.py \n#or\npython iBridges.py\nPlease see below how to configure the software to connect to your iRODS instance.\n\n\n\n\n\n\n\n\n\nInstall from zip/release\n\n\n\n\n\nunzip iBridges-Gui.zip\ncd iBridges-Gui\npython -m pip install -r requirements.txt\nYou can already start the application with\n./iBridges.py \n#or\npython iBridges.py\nPlease see below how to configure the software to connect to your iRODS instance.\n\n\n\n\n\n\n\n\n\nDownload and install binaries\n\n\n\n\n\nThe installation of binaries or executables will follow soon."
  },
  {
    "objectID": "docs/getting-started.html#configuration",
    "href": "docs/getting-started.html#configuration",
    "title": "iBridges configuration",
    "section": "Configuration",
    "text": "Configuration\n\niRODS environment.json\n\nPlease create a directory ~/.irods\nYour iRODS admin will provide an irods_environment.json file, its contents, or instructions on how to create it. Place that file into the .irods directory/folder.\n\nLinux: /home/\\&lt;username\\&gt;/.irods/irods_environment.json\nMac: /Users/\\&lt;username\\&gt;/.irods/irods_environment.json\nWindows: C:\\\\\\\\....\\\\\\&lt;username\\&gt;\\\\.irods\\\\irods_environment.json\n\nHere is an example that can be created with the iinit iCommands on Linux:\n\n{\n    \"irods_host\": \"server.fqdn.nl\", \n    \"irods_port\": 1247, \n    \"irods_user_name\": \"username\", \n    \"irods_zone_name\": \"myZone\", \n    \"irods_default_resource\": \"myResc\" \n}\n\n\niBridges config.json\niBridges will create its own configuration file in ~/.ibridges/ibridges_config.json containing the name of the last iRODS environment file used. This ibridges_config.json file can be updated to control other aspects of iBridges. For example:\n{\n    \"last_ienv\": \"irods_environment.json\",\n    \"davrods_server\": \"https://server.fqdn.nl\",\n    \"eln_token\": \"&lt;api key&gt;\",\n    \"amber_token\": \"&lt;api key&gt;\"\n    \"ui_tabs\": [\n        \"tabUpDownload\",\n        \"tabELNData\",\n        \"tabAmberWorkflow\"\n        \"tabDataBundle\",\n        \"tabCreateTicket\"\n    ],\n    \"force_transfers\": false,\n    \"check_free_space\": false\n}\nOptions:\n\ndavrods_server: the address of a webdav server, used to create entries in ElabJournal\neln_token, amber_token: API keys for tabELNData or tabAmberWorkflow respectively\nui_tabs: configure which tabs are shown (Browser and Info tabs always are)\n\ntabUpDownload: a two-pane upload/download tab\ntabELNData: for the Electronic Lab Notebook, eLabJournal\ntabAmberWorkflow: up and download data to and from Amberscript directly from iRODS.\ntabDataBundle: (un)bundle datasets from/to four supported formats\ntabCreateTicket: create iRODS tickets for anonymous access\n\nforce_transfers: always write data to iRODS\ncheck_free_space: checks the metadata free_space of resources and only shows resources with a free_space larger than 0.\n\nThe order of the list ui_tabs defines in which order the tabs will be presented in the GUI. By default the first tab is always the iRODS Browser and the last tab is always the Info tab; see here. These two tabs will always be loaded even when no tabs are configured.\nThe check_free_space and force_transfers options are REQUIRED and if not provided will be added automatically. The default values are\n\"check_free_space\": true,\n\"force_transfers\": false\nHowever, if the iRODS instance does not provide information about free space through the resource’s metadata free_space, no resources will be shown and no uploads will be allowed.\nTo enable and allow data transfers in case free_space is not set, set the options to:\n\"check_free_space\": false,\n\"force_transfers\": true\nThis setting makes top-level resources which are not annotated with their free space visible in the drop-down menus allowing selection of them. In addition, it sets the force flag for uploads overriding resource overflow protection.\nThe logs for both GUI and CLI clients can be found in ~/.ibridges/iBridges.log."
  },
  {
    "objectID": "docs/getting-started.html#usage",
    "href": "docs/getting-started.html#usage",
    "title": "iBridges configuration",
    "section": "Usage",
    "text": "Usage\nexport PYTHON_IRODSCLIENT_DEFAULT_XML=QUASI_XML\npython iBridges.py\nor\nenv PYTHON_IRODSCLIENT_DEFAULT_XML=QUASI_XML ./iBridges.py"
  },
  {
    "objectID": "docs/getting-started.html#irods-server-dependencies",
    "href": "docs/getting-started.html#irods-server-dependencies",
    "title": "iBridges configuration",
    "section": "iRODS server dependencies",
    "text": "iRODS server dependencies\n\nStorage capacity\nTo protect the iRODS resources from overflowing you should install an event hook on the iRODS servers that fill the resources’ RESC_FREE_SPACE attribute in the iCAT. These can be either catalog or resource servers. Please add the following to the /etc/irods/core.re or another rule engine file:\n\n\n\n\n\n\nExample storage capacity rule\n\n\n\n\n\n######################################################\n# Storage capacity policies.\n# Update the metadata field free_space of the resource\n# when data is moved there or deleted from it.\n#\n# Author: Christine Staiger (2021)\n#######################################################\n\nacPostProcForParallelTransferReceived(*leaf_resource) {\n    msiWriteRodsLog(\"LOGGING: acPostProcForParallelTransferReceived\", *Status);\n    msi_update_unixfilesystem_resource_free_space(*leaf_resource);\n}\n\nacPostProcForDataCopyReceived(*leaf_resource) {\n    msiWriteRodsLog(\"LOGGING: acPostProcForDataCopyReceived\", *Status);\n    msi_update_unixfilesystem_resource_free_space(*leaf_resource);\n}\n\n# for iput\nacPostProcForPut {\n    msi_update_unixfilesystem_resource_free_space($KVPairs.rescName);\n}\n\n# for storage update after irmtrash\nacPostProcForDelete {\n    msi_update_unixfilesystem_resource_free_space($KVPairs.rescName);\n}\nFor very busy systems, updating this value for every upload or delete can be prevented by commenting out or removing the last two stanzas if performance is being hampered.\n\n\n\nFor more complex resource hierarchies, the top of the resource tree (the root node) will usually not be updated with the free space values, but if it is (the sum of all leaf nodes is asssumed), the value in any leaf nodes will be ignored. If the root node has no free space value, the sum of the leaf nodes will be used instead. If none of the resource nodes are annotated, an error will occur. This feature can be overridden by annotating the root node’s free space value with an arbitrarily large value. Please note, that this action disables the built-in protection offered by this client.\n\n\nResource status\nIn the tab Info users can view the status of the resources. This metadata can be set by admins:\niadmin modresc &lt;resource name&gt; status &lt;String&gt;\n\n\nData (un)bundling\niRODS 4.2.x currently has no support for compressed structured files outside the iCommand ibun. Therefore, without custom microservices installed on a given iRODS server, only uncompressed TAR files are supported.\n\nTAR file format\nThe ibun help gives the example to use the -C option to change into the directory containing the potential contents of the TAR file. The bundling done with iBridges assumes this same format and creates TAR files likewise. For example bundling the contents of the collection /testZone/home/user/testColl containing:\n/testZone/home/user/testColl/file1.ext\n/testZone/home/user/testColl/file2.ext\n/testZone/home/user/testColl/file3.ext\nstores only the three data objects:\nfile1.ext\nfile2.ext\nfile3.ext\ninto /testZone/home/user/testColl.tar. Unbundling this data object recreates the /testZone/home/user/testColl collection if it does not exist and deposits the data objects into it. If there are already data objects or collections existing there, an error will result and the bundle will not be extracted.\n\n\n(Un)bundle options\niBridges has one option for (un)bundling data: Force operations. If the option is checked, two types of operations will be forced: one is to overwrite a bundle/collection that already exists, and the other is to remove the bundle files or collection contents without first sending them to the bin. If this behavior is undesirable, DO NOT USE THIS FORCE OPTION.\nIt is recommended that any kind of destructive actions be done in a separate step."
  },
  {
    "objectID": "docs/commandlineclient.html",
    "href": "docs/commandlineclient.html",
    "title": "iBridges CLI",
    "section": "",
    "text": "The iBridges CLI is a command line interface to up and download large amounts of data. It only updates data when necessary, i.e. if checksums of files differ.\n\n\nThe client uses the same configuration files as the GUI, i.e. the irods_environment.json and the ibridges_config.json.\n\nPlease create a directory ~/.irods and place your irods_environment.json there:\n\nLinux: /home/&lt;username&gt;/.irods/irods_environment.json\nMac: /Users/&lt;username&gt;/.irods/irods_environment.json\nWindows: C:\\\\….\\&lt;username&gt;\\.irods\\irods_environment.json\n\nPlease create a directory named ~/.ibridges. You can start the client and let the configuration file ~/.ibridges/ibridges_config.json be created.\nIf your iRODS instance does not provide information on available storage through the resource metadata free_space, please make sure to have the following setting in ~/.ibridges/ibridges_config.json\n\"check_free_space\": false,\n\"force_transfers\": true,\n\n\n\n\n\n--local_path LOCAL_PATH, -l LOCAL_PATH: mandatory\n--irods_path IRODS_PATH, -i IRODS_PATH: mandatory\n--operation {upload,download}, -o {upload,download}: mandatory, direction of data transfer\n--env ENV, -e ENV: optional, path to irods_environment.json; default value is last irods environment file as mentioned in /.ibridges/ibridges_conf.json, if that value is not set in the file it is the default /.irods/irods_environment.json\n--irods_resc IRODS_RESC, -r IRODS_RESC: optional, default should be set in ~/.irods/irods_environment.json as \"irods_default_resource\": \"name of resource\"\n--logdir LOGDIR: optional, default is ~/.ibridges in your home directory\n\n\n\n\n./iBridgesCli.py -h\nusage: python iBridgesCli.py [-h] [--local_path LOCAL_PATH]\n                             [--irods_path IRODS_PATH] --operation\n                             {upload,download} [--env ENV]\n                             [--irods_resc IRODS_RESC] [--logdir LOGDIR]\n\noptions:\n  -h, --help            show this help message and exit\n  --local_path LOCAL_PATH, -l LOCAL_PATH\n                        Local path to download to, or upload from\n  --irods_path IRODS_PATH, -i IRODS_PATH\n                        iRods path to upload to, or download from\n  --operation {upload,download}, -o {upload,download}\n  --env ENV, -e ENV     Path to iRods environment file\n                        (irods_environment.json).\n  --irods_resc IRODS_RESC, -r IRODS_RESC\n                        iRods resource. If omitted default will be read from\n                        iRods env file.\n  --logdir LOGDIR       Directory for logfile. Default:\n                        /home/user/.ibridges"
  },
  {
    "objectID": "docs/commandlineclient.html#configuration",
    "href": "docs/commandlineclient.html#configuration",
    "title": "iBridges CLI",
    "section": "",
    "text": "The client uses the same configuration files as the GUI, i.e. the irods_environment.json and the ibridges_config.json.\n\nPlease create a directory ~/.irods and place your irods_environment.json there:\n\nLinux: /home/&lt;username&gt;/.irods/irods_environment.json\nMac: /Users/&lt;username&gt;/.irods/irods_environment.json\nWindows: C:\\\\….\\&lt;username&gt;\\.irods\\irods_environment.json\n\nPlease create a directory named ~/.ibridges. You can start the client and let the configuration file ~/.ibridges/ibridges_config.json be created.\nIf your iRODS instance does not provide information on available storage through the resource metadata free_space, please make sure to have the following setting in ~/.ibridges/ibridges_config.json\n\"check_free_space\": false,\n\"force_transfers\": true,"
  },
  {
    "objectID": "docs/commandlineclient.html#commandline-parameters",
    "href": "docs/commandlineclient.html#commandline-parameters",
    "title": "iBridges CLI",
    "section": "",
    "text": "--local_path LOCAL_PATH, -l LOCAL_PATH: mandatory\n--irods_path IRODS_PATH, -i IRODS_PATH: mandatory\n--operation {upload,download}, -o {upload,download}: mandatory, direction of data transfer\n--env ENV, -e ENV: optional, path to irods_environment.json; default value is last irods environment file as mentioned in /.ibridges/ibridges_conf.json, if that value is not set in the file it is the default /.irods/irods_environment.json\n--irods_resc IRODS_RESC, -r IRODS_RESC: optional, default should be set in ~/.irods/irods_environment.json as \"irods_default_resource\": \"name of resource\"\n--logdir LOGDIR: optional, default is ~/.ibridges in your home directory"
  },
  {
    "objectID": "docs/commandlineclient.html#usage",
    "href": "docs/commandlineclient.html#usage",
    "title": "iBridges CLI",
    "section": "",
    "text": "./iBridgesCli.py -h\nusage: python iBridgesCli.py [-h] [--local_path LOCAL_PATH]\n                             [--irods_path IRODS_PATH] --operation\n                             {upload,download} [--env ENV]\n                             [--irods_resc IRODS_RESC] [--logdir LOGDIR]\n\noptions:\n  -h, --help            show this help message and exit\n  --local_path LOCAL_PATH, -l LOCAL_PATH\n                        Local path to download to, or upload from\n  --irods_path IRODS_PATH, -i IRODS_PATH\n                        iRods path to upload to, or download from\n  --operation {upload,download}, -o {upload,download}\n  --env ENV, -e ENV     Path to iRods environment file\n                        (irods_environment.json).\n  --irods_resc IRODS_RESC, -r IRODS_RESC\n                        iRods resource. If omitted default will be read from\n                        iRods env file.\n  --logdir LOGDIR       Directory for logfile. Default:\n                        /home/user/.ibridges"
  },
  {
    "objectID": "docs/developer.html",
    "href": "docs/developer.html",
    "title": "Developer guide",
    "section": "",
    "text": "If you want to report a bug, please make sure to mention:\n\nSoftware version or branch you are working on\nPython version and iRODS server version\npython-irodsclient version\nSteps to reproduce the behaviour\nExpected behaviour\n\nIf you have an idea for a new feature, please let us also know through an issue.\n\n\nReport Bug or Request Feature .\n\n\n\n\n\nEach tab in the GUI is an own class. If you want to create your own tab, please follow the steps below.\n\n\n\n\n\n\n1. Create a ui-file\n\n\n\n\n\nTo help you to create a nice layout of the new tab we recommend to use the QT-designer. Please choose Qt Designer Form and the template Widget.\n\n\n\n\n\nSet the Path to &lt;iBridges-Gui/gui/ui-files&gt;\nTo ensure the same color theme, right-click on Form and choose change the stylesheet.\n\n\n\n\n\nCopy the following text over to the window.\nQWidget\n{\n    background-color: rgb(54, 54, 54);\n    color: rgb(86, 184, 139);\n    border-color: rgb(217, 174, 23);\n}\n\nQLineEdit\n{\n    background-color: rgb(85, 87, 83);\n    border-color: rgb(217, 174, 23);\n}\n\nQTreeView\n{\nbackground-color: rgb(85, 87, 83);\n}\n\nQLabel#error_label\n{\n    color: rgb(217, 174, 23);\n}\nThe errorLabel is a specific object, while the settings for Qwidget, QLineEdit and QTreeView are valid for all objects of that type.\nNow you can design your new form. In our example the form contains a placeholder for the iRODS tree, a text field (green text) and an error label (yellow text).\n\n\n\n\n\nIn the designer you also set the variable names of the objects. These will be used in the Python code, so make sure they are meaningful to you.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. Convert the ui-file into Python code\n\n\n\n\n\nConvert the ui-file to Python file with:\ncd iBridges-Gui\npython -m PyQt6.uic.pyuic -x gui/ui_files/ExampleTab.ui -o gui/ui_files/ExampleTab.py\nIn some cases a standard class name is set in the Python file.\n# Form implementation generated from reading ui file 'gui/ui_files/example_tab.ui'\n#\n# Created by: PyQt6 UI code generator 6.3.1\n#\n# WARNING: Any manual changes made to this file will be lost when pyuic6 is\n# run again.  Do not edit this file unless you know what you are doing.\n\nfrom PyQt6 import QtCore, QtGui, QtWidgets\n\n\nclass Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        ...\nYou can change the class name Ui_Form to something more meaningful. In this example, we rename the class to Ui_ExampleTab.\nWe provide a full example file in iBridges-Gui/gui/IrodsExampleTab.py.\nThis is the minimum code you need to initialise the new tab in the GUI:\nimport logging\nimport sys\n\nimport PyQt6.QtCore\nimport PyQt6.QtGui\nimport PyQt6.QtWidgets\nimport PyQt6.uic\n\nimport gui\nimport meta\nimport utils\n\nclass IrodsExampleTab(PyQt6.QtWidgets.QWidget,\n                      gui.ui_files.ExampleTab.Ui_ExampleTab):\n    context = utils.context.Context()\n    def __init__(self):\n        super().__init__()\n        if getattr(sys, 'frozen', False):\n            super().setupUi(self)\n        else:\n            PyQt6.uic.loadUi(\"gui/ui_files/ExampleTab.ui\", self)\n        self.error_label.setText(\"Whooohoo\")\nFor the software package to find the layout for the new tab, we need to add it to the iBridges-Gui/gui/ui_files/init.py. Add the line:\nfrom . import IrodsExampleTab\n\n\n\n\n\n\n\n\n\n3. Integrate the new tab into iBridges\n\n\n\n\n\n\nCreate a new Python class iBridges-Gui/gui/IrodsExampleTab.py\nAdd from . import IrodsExampleTab to iBridges-Gui/gui/init.py\n\n\n\n\n\n\n\n\n\n\n4. Integrate the new tab class into mainmenu.py\n\n\n\n\n\nIn the file iBridges-Gui/gui/mainmenu.py you will find the dictionary ui_tabs_lookup. The dictionary maps from &lt;tabname&gt; (as used in ibridges_config.json) to a function in mainmeny.py which initialises the tab. First we will add the new name:\nui_tabs_lookup = {\n    'tabBrowser': self.setupTabBrowser,\n    ...\n    'tabInfo': self.setupTabInfo,\n    'tabExample': self.setupTabExample\n}\nNow we need to write the function setupTabExample Add the new function setupTabBrowser:\n    def setupTabExample(self):\n        self.exampleTab = gui.ExampleTab.ExampleTab()\n        self.tabWidget.addTab(self.exampleTab, 'Example')\nDon’t forget to add the new keyword to the tabs in your ibridges_config.json\nNow the new tab should appear as a tab in the application and we can continue defining its behaviour.\n\n\n\n\n\n\n\n\n\n5. Defining the functionality of the new tab\n\n\n\n\n\nYou might have observed that we already defined a variable context as a global variable. The class utils.context.Context contains all parameters from the irods_environment.json and ibridges_config.json, stored as utils.json_config.JSONConfig objects along with some extra context information and functionality.\nimport utils\ncontext = utils.context.Context()\ndir(context)\n\n[\n 'application_name',\n 'ibridges_conf_file',\n 'ibridges_configuration',\n 'ienv_is_complete',\n 'irods_env_file',\n 'irods_environment',\n 'reset',\n 'save_ibridges_configuration',\n 'save_irods_environment']\nThe class Context is a singleton, i.e. no matter how often you instantiate a Context object there will always and only be one object in memory.\ncontext = utils.context.Context()\ncontext1 = utils.context.Context()\n\ncontext == context1\nTrue\nThat also means that if you change the values in the object, all other classes using Context will have the same information.\nAnother singleton class IrodsConnector contains all functionality to interact with the iRODS server.\nWith all that you can define the functionality of the tab like in the example we provide.\n\n\n\n\n\n\n\n\n\n6. Path handling in iRODS\n\n\n\n\n\niRODS paths of data objects and collections are given as strings:\nimport irodsConnector\nimport utils\nconn = irodsConnector.manager.IrodsConnector()\ncontext = utils.context.Context()\ncontext.irods_env_file = '~/.irods/irods_environment.json'\nconn.password = \"************\"\nconn.connect()\ncoll = conn.data_op.get_collection(\"/&lt;zone&gt;/home/&lt;coll_name&gt;\")\n\ntype(coll.path)\nstr\nThe class utils.path.iRODSPath (derived from str) casts a string into a pure POSIX path that has no file system functionality. We also offer the complementary functionality for local paths in utils.path.LocalPath. The setting of the context.irods_env_file property utilizes this class and resolves the user’s home directory (~/) automatically on all platforms.\ndir(utils.path.iRODSPath)\n\n['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', \n'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', \n'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', \n'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', \n'joinpath', ...]\n \n\n\n\n\n\n\nIf you want to contribute to the iBridges code base, you can submit pull requests."
  },
  {
    "objectID": "docs/developer.html#submitting-issues",
    "href": "docs/developer.html#submitting-issues",
    "title": "Developer guide",
    "section": "",
    "text": "If you want to report a bug, please make sure to mention:\n\nSoftware version or branch you are working on\nPython version and iRODS server version\npython-irodsclient version\nSteps to reproduce the behaviour\nExpected behaviour\n\nIf you have an idea for a new feature, please let us also know through an issue.\n\n\nReport Bug or Request Feature ."
  },
  {
    "objectID": "docs/developer.html#extending-ibridges-create-own-tab",
    "href": "docs/developer.html#extending-ibridges-create-own-tab",
    "title": "Developer guide",
    "section": "",
    "text": "Each tab in the GUI is an own class. If you want to create your own tab, please follow the steps below.\n\n\n\n\n\n\n1. Create a ui-file\n\n\n\n\n\nTo help you to create a nice layout of the new tab we recommend to use the QT-designer. Please choose Qt Designer Form and the template Widget.\n\n\n\n\n\nSet the Path to &lt;iBridges-Gui/gui/ui-files&gt;\nTo ensure the same color theme, right-click on Form and choose change the stylesheet.\n\n\n\n\n\nCopy the following text over to the window.\nQWidget\n{\n    background-color: rgb(54, 54, 54);\n    color: rgb(86, 184, 139);\n    border-color: rgb(217, 174, 23);\n}\n\nQLineEdit\n{\n    background-color: rgb(85, 87, 83);\n    border-color: rgb(217, 174, 23);\n}\n\nQTreeView\n{\nbackground-color: rgb(85, 87, 83);\n}\n\nQLabel#error_label\n{\n    color: rgb(217, 174, 23);\n}\nThe errorLabel is a specific object, while the settings for Qwidget, QLineEdit and QTreeView are valid for all objects of that type.\nNow you can design your new form. In our example the form contains a placeholder for the iRODS tree, a text field (green text) and an error label (yellow text).\n\n\n\n\n\nIn the designer you also set the variable names of the objects. These will be used in the Python code, so make sure they are meaningful to you.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. Convert the ui-file into Python code\n\n\n\n\n\nConvert the ui-file to Python file with:\ncd iBridges-Gui\npython -m PyQt6.uic.pyuic -x gui/ui_files/ExampleTab.ui -o gui/ui_files/ExampleTab.py\nIn some cases a standard class name is set in the Python file.\n# Form implementation generated from reading ui file 'gui/ui_files/example_tab.ui'\n#\n# Created by: PyQt6 UI code generator 6.3.1\n#\n# WARNING: Any manual changes made to this file will be lost when pyuic6 is\n# run again.  Do not edit this file unless you know what you are doing.\n\nfrom PyQt6 import QtCore, QtGui, QtWidgets\n\n\nclass Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        ...\nYou can change the class name Ui_Form to something more meaningful. In this example, we rename the class to Ui_ExampleTab.\nWe provide a full example file in iBridges-Gui/gui/IrodsExampleTab.py.\nThis is the minimum code you need to initialise the new tab in the GUI:\nimport logging\nimport sys\n\nimport PyQt6.QtCore\nimport PyQt6.QtGui\nimport PyQt6.QtWidgets\nimport PyQt6.uic\n\nimport gui\nimport meta\nimport utils\n\nclass IrodsExampleTab(PyQt6.QtWidgets.QWidget,\n                      gui.ui_files.ExampleTab.Ui_ExampleTab):\n    context = utils.context.Context()\n    def __init__(self):\n        super().__init__()\n        if getattr(sys, 'frozen', False):\n            super().setupUi(self)\n        else:\n            PyQt6.uic.loadUi(\"gui/ui_files/ExampleTab.ui\", self)\n        self.error_label.setText(\"Whooohoo\")\nFor the software package to find the layout for the new tab, we need to add it to the iBridges-Gui/gui/ui_files/init.py. Add the line:\nfrom . import IrodsExampleTab\n\n\n\n\n\n\n\n\n\n3. Integrate the new tab into iBridges\n\n\n\n\n\n\nCreate a new Python class iBridges-Gui/gui/IrodsExampleTab.py\nAdd from . import IrodsExampleTab to iBridges-Gui/gui/init.py\n\n\n\n\n\n\n\n\n\n\n4. Integrate the new tab class into mainmenu.py\n\n\n\n\n\nIn the file iBridges-Gui/gui/mainmenu.py you will find the dictionary ui_tabs_lookup. The dictionary maps from &lt;tabname&gt; (as used in ibridges_config.json) to a function in mainmeny.py which initialises the tab. First we will add the new name:\nui_tabs_lookup = {\n    'tabBrowser': self.setupTabBrowser,\n    ...\n    'tabInfo': self.setupTabInfo,\n    'tabExample': self.setupTabExample\n}\nNow we need to write the function setupTabExample Add the new function setupTabBrowser:\n    def setupTabExample(self):\n        self.exampleTab = gui.ExampleTab.ExampleTab()\n        self.tabWidget.addTab(self.exampleTab, 'Example')\nDon’t forget to add the new keyword to the tabs in your ibridges_config.json\nNow the new tab should appear as a tab in the application and we can continue defining its behaviour.\n\n\n\n\n\n\n\n\n\n5. Defining the functionality of the new tab\n\n\n\n\n\nYou might have observed that we already defined a variable context as a global variable. The class utils.context.Context contains all parameters from the irods_environment.json and ibridges_config.json, stored as utils.json_config.JSONConfig objects along with some extra context information and functionality.\nimport utils\ncontext = utils.context.Context()\ndir(context)\n\n[\n 'application_name',\n 'ibridges_conf_file',\n 'ibridges_configuration',\n 'ienv_is_complete',\n 'irods_env_file',\n 'irods_environment',\n 'reset',\n 'save_ibridges_configuration',\n 'save_irods_environment']\nThe class Context is a singleton, i.e. no matter how often you instantiate a Context object there will always and only be one object in memory.\ncontext = utils.context.Context()\ncontext1 = utils.context.Context()\n\ncontext == context1\nTrue\nThat also means that if you change the values in the object, all other classes using Context will have the same information.\nAnother singleton class IrodsConnector contains all functionality to interact with the iRODS server.\nWith all that you can define the functionality of the tab like in the example we provide.\n\n\n\n\n\n\n\n\n\n6. Path handling in iRODS\n\n\n\n\n\niRODS paths of data objects and collections are given as strings:\nimport irodsConnector\nimport utils\nconn = irodsConnector.manager.IrodsConnector()\ncontext = utils.context.Context()\ncontext.irods_env_file = '~/.irods/irods_environment.json'\nconn.password = \"************\"\nconn.connect()\ncoll = conn.data_op.get_collection(\"/&lt;zone&gt;/home/&lt;coll_name&gt;\")\n\ntype(coll.path)\nstr\nThe class utils.path.iRODSPath (derived from str) casts a string into a pure POSIX path that has no file system functionality. We also offer the complementary functionality for local paths in utils.path.LocalPath. The setting of the context.irods_env_file property utilizes this class and resolves the user’s home directory (~/) automatically on all platforms.\ndir(utils.path.iRODSPath)\n\n['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', \n'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', \n'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', \n'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', \n'joinpath', ...]"
  },
  {
    "objectID": "docs/developer.html#contributing-to-the-code-base",
    "href": "docs/developer.html#contributing-to-the-code-base",
    "title": "Developer guide",
    "section": "",
    "text": "If you want to contribute to the iBridges code base, you can submit pull requests."
  },
  {
    "objectID": "docs/userdoc.html",
    "href": "docs/userdoc.html",
    "title": "iBridges User Documentation",
    "section": "",
    "text": "iBridges is a GUI to a Data management platform based on iRODS. It exposes iRODS functionality through the graphical interface to the users. We divided the different functions into groups where each function group is represented in an own tab in the GUI. The tabs are configured for the user depending on the user’s rights and role in the Data management platform.\nThe tabs which currently are in use:\n\nThe Browser is a tool to browse through iRODS collections and gather information on iRODS data objects\nThe Data Transfers tab gives tools to up and download large data safely.\nIn the Compress/bundle data tab the user is given tools to bundle (tar) iRODS data collections and to extract them again. Note, that this only bundles the files, it will not preserve the metadata.\nThe Create access token tab allows users to create iRODS tickets to collections in read mode.\nThe ELN Data upload tab is made for specific data uploads that belong to an Experiment described in an Elabjournal instance.\nThe AmberScript Connection tab allows to up and download data from and to Amberscript.\nThe Info tab summarises information from the iRODS server e.g. the user’s group, resources, their status and their available storage etc.\n\n\n\n\n\nTo browse through your data collections in iRODS click on the Browser tab.\n\nNavigation bar: Type a valid collection or object path in and hit enter.\nCollection and data object table:\n\nClick on the Name of a collection or option. This will load the tabs below the table (see below)\nDouble click on a collection to navigate into the collection\n\nLower tabs\n\nPreview: Lists the content of a collection or the first 50 lines of text data (.txt, .json, .csv)\nMetadata: You can annotate collections and data objects with own annotations of key, value, unit. The keys and values can be used in the search-drop down menu to search for data.\nPermissions: Will show the permissions own(er), read, write. It also provides to grant and withdraw rights.\nReplicas: The tab shows the resource hierarchy and on which storage resource data objects are stored. It also provides information on the size and modificatin dates, and the status (good or broken) per resource which holds a copy of the data. Note, collections do not have a resource.\nDelete: In the browser table click on the collection or object you want to delete, then click Load and then Delete. This will delete a whole collection with all its members or the data object.\n\n\nNote: The File Upload and File download buttons are only meant for uploading and downloading small single files. For large data transfers go to the Data transfer tab.\n\n\n\n\n\nSelect the iRODS collection or data object to download and the folder to download to.\nPress the download button. A pop up window opens and the difference between the source and destination is calculated:\n\nBased on checksums, a unique hash for each file the GUI determines whether the source file and the destination file are identical. If so, the file will not be downloaded again. The GUI will only download data which does not exist or where its content differs.\nThe GUI also computes the total size of the data objects and will only start the download if the total amount will fit on your destination file system.\n\n\n\nWhen the check is done, the loading screen disappears and the number of files which exist with a different checksum (1) and files which only exist on iRODS (2) will be indicated. Press the Download button to start the file transfer. iRODS automatically checks the checksum to ensure all downloaded files are complete.\n\n\n\n\n\nCheck the resource. There may be several storage resources configured for you in the system. Your iRODS admin will give you advice which one to use for which data and workflow. The drop-down menu is preset with the irods_default_resource from the .irods/irods_environment.json. Your iRODS administrator can help you to decide which resource to use for which data.\nSelect the local file or folder and iRODS collection to upload to.\nPress the upload button. As in the download, a pop up window will appear which will execute the same checks as for the data downloads.\n\n\n\n\n\n\n\n\nCreate access tokens\n\n\n\n\n\niRODS tickets can be created in the tab “Create access tokens” (tabTicketLogin in .ibridges/ibridges_config.json).\nCurrently, tickets can only be set to iRODS collections and in mode read. Tickets can be given an expiration date.\n\n\n\n\n\n\n\n\n\nData bundeling\n\n\n\n\n\nUsers can bundle their data into tar-archives. Please note that metadata and acls will not be part of the bundled data and will be “forgotten” when unpacking data.\n\n\n\n\n\n\nClick on Options in the menu bar of the window and select Search. This will open a mask to search for data objects and collections using metadata key-value pairs, collection paths and data object paths.\n\nThe Select and Close button will load the selected collections and objects into the Browser tab where you can further inspect and annotate the data.\n\n\n\n\n\n\n\n\n\nElabjournal\n\n\n\n\n\n\nAdd \"tabELNData\" to the \"ui_tabs\" in .ibridges/ibridges_config\nStore your ElabJournal API token in .ibridges/ibridges_config :\n{\n    \"davrods_server\": \"&lt;Fully qualified domain name&gt;\",\n    \"eln_token\": \"xx.elabjournal.com;*********\",\n    \"force_transfers\": false,\n    \"check_free_space\": true,\n    \"ui_tabs\":[\n        \"tabELNData\"\n    ]\n}\n\nStep 1: Provide your Elabjournal API key, it is read from the .ibridges/ibridges_config.json but you can also paste it into the mask. Click connect.\nYou will see that the group table will be filled and once you selected (simply click on) a group, the experiments will be loaded. Please click on the experiment you would like to upload data for.\nStep 2: When you successfully selected a group and an experiment their IDs will show up here.\nStep 3: Select the data on your PC which you want to upload to iRODS.\nStep 4: Make sure to provide the path to the correct collection in iRODS where the data should be uploaded to.\nWhen you click on Upload, a new collection will be created in iRODS (if it does not exist) with the path &lt;collection provided in step 4&gt;/ELN/&lt;groupID&gt;/&lt;experimentID&gt;\nA preview of the data will be shown in the file below the iRODS path.\nUploaded data to iRODS will be labeled with the URL to the Elabjournal experiment. You can inspect the metadata in the tab Browser. \n\nNote: data will always be uploaded to iRODS, there will only be a small section added in your Elabjournal experiment with a link to the data.\n\n\n\n\n\n\n\n\n\nAmberscript\n\n\n\n\n\n\nAdd tabAmberWorkflow to the \"ui_tabs\" in .ibridges/ibridges_config.json\nStore your Amberscript API token in .ibridges/ibridges_config.json\n{\n    \"amber_token\": \"**************\",\n    \"force_transfers\": false,\n    \"check_free_space\": true,\n    \"ui_tabs\":[\n        \"tabAmberWorkflow\"\n    ]\n}\n\n\n\n\n\n\n\n\n\n\nPrototype tabs and fetaures\n\n\n\n\n\n\nUsers can login with a ticket, the iRODS server name and the collection name if the anonymous user is allowed on the iRODS server.\nCurrently, this feature does not work if the iRODS instance is SSL enabled."
  },
  {
    "objectID": "docs/userdoc.html#synopsis",
    "href": "docs/userdoc.html#synopsis",
    "title": "iBridges User Documentation",
    "section": "",
    "text": "iBridges is a GUI to a Data management platform based on iRODS. It exposes iRODS functionality through the graphical interface to the users. We divided the different functions into groups where each function group is represented in an own tab in the GUI. The tabs are configured for the user depending on the user’s rights and role in the Data management platform.\nThe tabs which currently are in use:\n\nThe Browser is a tool to browse through iRODS collections and gather information on iRODS data objects\nThe Data Transfers tab gives tools to up and download large data safely.\nIn the Compress/bundle data tab the user is given tools to bundle (tar) iRODS data collections and to extract them again. Note, that this only bundles the files, it will not preserve the metadata.\nThe Create access token tab allows users to create iRODS tickets to collections in read mode.\nThe ELN Data upload tab is made for specific data uploads that belong to an Experiment described in an Elabjournal instance.\nThe AmberScript Connection tab allows to up and download data from and to Amberscript.\nThe Info tab summarises information from the iRODS server e.g. the user’s group, resources, their status and their available storage etc."
  },
  {
    "objectID": "docs/userdoc.html#browsing-through-your-irods-collections",
    "href": "docs/userdoc.html#browsing-through-your-irods-collections",
    "title": "iBridges User Documentation",
    "section": "",
    "text": "To browse through your data collections in iRODS click on the Browser tab.\n\nNavigation bar: Type a valid collection or object path in and hit enter.\nCollection and data object table:\n\nClick on the Name of a collection or option. This will load the tabs below the table (see below)\nDouble click on a collection to navigate into the collection\n\nLower tabs\n\nPreview: Lists the content of a collection or the first 50 lines of text data (.txt, .json, .csv)\nMetadata: You can annotate collections and data objects with own annotations of key, value, unit. The keys and values can be used in the search-drop down menu to search for data.\nPermissions: Will show the permissions own(er), read, write. It also provides to grant and withdraw rights.\nReplicas: The tab shows the resource hierarchy and on which storage resource data objects are stored. It also provides information on the size and modificatin dates, and the status (good or broken) per resource which holds a copy of the data. Note, collections do not have a resource.\nDelete: In the browser table click on the collection or object you want to delete, then click Load and then Delete. This will delete a whole collection with all its members or the data object.\n\n\nNote: The File Upload and File download buttons are only meant for uploading and downloading small single files. For large data transfers go to the Data transfer tab."
  },
  {
    "objectID": "docs/userdoc.html#downloading-data",
    "href": "docs/userdoc.html#downloading-data",
    "title": "iBridges User Documentation",
    "section": "",
    "text": "Select the iRODS collection or data object to download and the folder to download to.\nPress the download button. A pop up window opens and the difference between the source and destination is calculated:\n\nBased on checksums, a unique hash for each file the GUI determines whether the source file and the destination file are identical. If so, the file will not be downloaded again. The GUI will only download data which does not exist or where its content differs.\nThe GUI also computes the total size of the data objects and will only start the download if the total amount will fit on your destination file system.\n\n\n\nWhen the check is done, the loading screen disappears and the number of files which exist with a different checksum (1) and files which only exist on iRODS (2) will be indicated. Press the Download button to start the file transfer. iRODS automatically checks the checksum to ensure all downloaded files are complete."
  },
  {
    "objectID": "docs/userdoc.html#uploading-data",
    "href": "docs/userdoc.html#uploading-data",
    "title": "iBridges User Documentation",
    "section": "",
    "text": "Check the resource. There may be several storage resources configured for you in the system. Your iRODS admin will give you advice which one to use for which data and workflow. The drop-down menu is preset with the irods_default_resource from the .irods/irods_environment.json. Your iRODS administrator can help you to decide which resource to use for which data.\nSelect the local file or folder and iRODS collection to upload to.\nPress the upload button. As in the download, a pop up window will appear which will execute the same checks as for the data downloads.\n\n\n\n\n\n\n\n\nCreate access tokens\n\n\n\n\n\niRODS tickets can be created in the tab “Create access tokens” (tabTicketLogin in .ibridges/ibridges_config.json).\nCurrently, tickets can only be set to iRODS collections and in mode read. Tickets can be given an expiration date.\n\n\n\n\n\n\n\n\n\nData bundeling\n\n\n\n\n\nUsers can bundle their data into tar-archives. Please note that metadata and acls will not be part of the bundled data and will be “forgotten” when unpacking data."
  },
  {
    "objectID": "docs/userdoc.html#searching-for-data",
    "href": "docs/userdoc.html#searching-for-data",
    "title": "iBridges User Documentation",
    "section": "",
    "text": "Click on Options in the menu bar of the window and select Search. This will open a mask to search for data objects and collections using metadata key-value pairs, collection paths and data object paths.\n\nThe Select and Close button will load the selected collections and objects into the Browser tab where you can further inspect and annotate the data."
  },
  {
    "objectID": "docs/userdoc.html#sec-features",
    "href": "docs/userdoc.html#sec-features",
    "title": "iBridges User Documentation",
    "section": "",
    "text": "Elabjournal\n\n\n\n\n\n\nAdd \"tabELNData\" to the \"ui_tabs\" in .ibridges/ibridges_config\nStore your ElabJournal API token in .ibridges/ibridges_config :\n{\n    \"davrods_server\": \"&lt;Fully qualified domain name&gt;\",\n    \"eln_token\": \"xx.elabjournal.com;*********\",\n    \"force_transfers\": false,\n    \"check_free_space\": true,\n    \"ui_tabs\":[\n        \"tabELNData\"\n    ]\n}\n\nStep 1: Provide your Elabjournal API key, it is read from the .ibridges/ibridges_config.json but you can also paste it into the mask. Click connect.\nYou will see that the group table will be filled and once you selected (simply click on) a group, the experiments will be loaded. Please click on the experiment you would like to upload data for.\nStep 2: When you successfully selected a group and an experiment their IDs will show up here.\nStep 3: Select the data on your PC which you want to upload to iRODS.\nStep 4: Make sure to provide the path to the correct collection in iRODS where the data should be uploaded to.\nWhen you click on Upload, a new collection will be created in iRODS (if it does not exist) with the path &lt;collection provided in step 4&gt;/ELN/&lt;groupID&gt;/&lt;experimentID&gt;\nA preview of the data will be shown in the file below the iRODS path.\nUploaded data to iRODS will be labeled with the URL to the Elabjournal experiment. You can inspect the metadata in the tab Browser. \n\nNote: data will always be uploaded to iRODS, there will only be a small section added in your Elabjournal experiment with a link to the data.\n\n\n\n\n\n\n\n\n\nAmberscript\n\n\n\n\n\n\nAdd tabAmberWorkflow to the \"ui_tabs\" in .ibridges/ibridges_config.json\nStore your Amberscript API token in .ibridges/ibridges_config.json\n{\n    \"amber_token\": \"**************\",\n    \"force_transfers\": false,\n    \"check_free_space\": true,\n    \"ui_tabs\":[\n        \"tabAmberWorkflow\"\n    ]\n}\n\n\n\n\n\n\n\n\n\n\nPrototype tabs and fetaures\n\n\n\n\n\n\nUsers can login with a ticket, the iRODS server name and the collection name if the anonymous user is allowed on the iRODS server.\nCurrently, this feature does not work if the iRODS instance is SSL enabled."
  },
  {
    "objectID": "docs/info.html",
    "href": "docs/info.html",
    "title": "What is iBridges",
    "section": "",
    "text": "iBridges is a standalone client software desktop application, written in Python, to provide users of Windows, Linux and Mac with a graphical user interface to interact with iRODS servers. The tool is agnostic to any rules/policies in the server. The out-of-the-box iBridges supports three main functions: browsing and manipulating data objects, upload/download data, and search through data collections.\nWe also provide a command line interface with which data can be uploaded and downloaded.\nThe GUI can be extended by users to implement their own data workflows."
  },
  {
    "objectID": "docs/info.html#supported-irods-versions",
    "href": "docs/info.html#supported-irods-versions",
    "title": "What is iBridges",
    "section": "Supported iRODS versions",
    "text": "Supported iRODS versions\nWe test our code on iRODS servers with versions - 4.2.11, 4.2.12 - 4.3.0"
  },
  {
    "objectID": "docs/info.html#dependencies",
    "href": "docs/info.html#dependencies",
    "title": "What is iBridges",
    "section": "Dependencies",
    "text": "Dependencies\n\nPython3.9+\nQT v6+"
  },
  {
    "objectID": "docs/info.html#authors",
    "href": "docs/info.html#authors",
    "title": "What is iBridges",
    "section": "Authors",
    "text": "Authors\nMaintainer: Christine Staiger, Tim van Daalen\nContributors: John McFarland, Maarten Schermer, Simona Stoica, Jos Tersteeg"
  },
  {
    "objectID": "docs/info.html#license",
    "href": "docs/info.html#license",
    "title": "What is iBridges",
    "section": "License",
    "text": "License\nGPL v3"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "iBridges",
    "section": "",
    "text": "Welcome\nThis page provides user and developer documentation of the iBridges iRODS client. Get started using the links below!\n\nWhat is iBridges\nGetting started\nUser guide\nCommand line tool\nDeveloper guide\nRoadmap and known issues"
  }
]