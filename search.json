[
  {
    "objectID": "docs/info.html",
    "href": "docs/info.html",
    "title": "What is iBridges",
    "section": "",
    "text": "iBridges is a standalone client software desktop application, written in Python, to provide users of Windows, Linux and Mac with a graphical user interface to interact with iRODS servers. The tool is agnostic to any rules/policies in the server. The out-of-the-box iBridges supports three main functions: browsing and manipulating data objects, upload/download data, and search through data collections.\nWe also provide a commandline interface with which data can be uploaded and downloaded.\nThe GUI can be extended by users to implement their own data workflows."
  },
  {
    "objectID": "docs/info.html#dependencies",
    "href": "docs/info.html#dependencies",
    "title": "What is iBridges",
    "section": "Dependencies",
    "text": "Dependencies\n\nPython3.10.2+\nQT v6+"
  },
  {
    "objectID": "docs/info.html#authors",
    "href": "docs/info.html#authors",
    "title": "What is iBridges",
    "section": "Authors",
    "text": "Authors\nMaintainer: Christine Staiger, Tim van Daalen Contributors: John McFarland"
  },
  {
    "objectID": "docs/info.html#license",
    "href": "docs/info.html#license",
    "title": "What is iBridges",
    "section": "License",
    "text": "License\nGPL v3"
  },
  {
    "objectID": "docs/getting-started.html",
    "href": "docs/getting-started.html",
    "title": "iBridges configuration",
    "section": "",
    "text": "The iRODS GUI works with any iRODS instance. Here we show how to configure the application to work your specific iRODS instance. Please note, that some features (tab views in the GUI) depend on certain server settings. You will find those dependencies at the end of the document."
  },
  {
    "objectID": "docs/getting-started.html#system-dependencies",
    "href": "docs/getting-started.html#system-dependencies",
    "title": "iBridges configuration",
    "section": "System dependencies",
    "text": "System dependencies\n\nPython: you will need Python 3.10 or higher\npip: to install package dependencies you will need pip3, version 22.2.2 or higher\n\nIf you run the software from code plase install required Python packages:\npython3.10 -m pip install -r requirements.txt"
  },
  {
    "objectID": "docs/getting-started.html#configuration",
    "href": "docs/getting-started.html#configuration",
    "title": "iBridges configuration",
    "section": "Configuration",
    "text": "Configuration\n\niRODS environment.json\n\nPlease create a directory/folder named .irods in your home directory/folder (~/.irods/ in Linux shorthand).\n\nLinux: /home/\\<username\\>/.irods/irods_environment.json\nMac: /Users/\\<username\\>/.irods/irods_environment.json\nWindows: C:\\\\\\\\....\\\\\\<username\\>\\\\.irods\\\\irods_environment.json\n\nYour iRODS admin will provide an irods_environment.json file, its contents, or instructions on how to create it. Place that file into the .irods directory/folder. Here is an example that can be created with the iinit iCommands on Linux:\n\n{\n    \"irods_host\": \"server.fqdn.nl\", \n    \"irods_port\": 1247, \n    \"irods_user_name\": \"username\", \n    \"irods_zone_name\": \"myZone\", \n    \"irods_default_resource\": \"myResc\" \n}\n\n\niBridges config.json\niBridges will create its own configuration file in ~/.ibridges/ containing the name of the last iRODS environment file used. This config.json file can be updated to control other aspects of iBridges. For example:\n{\n    \"last_ienv\": \"irods_environment.json\",\n    \"davrods_server\": \"https://server.fqdn.nl\",\n    \"ui_tabs\": [\n        \"tabUpDownload\",\n        \"tabELNData\",\n        \"tabDataBundle\",\n        \"tabCreateTicket\"\n    ],\n    \"force_unknown_free_space\": false\n}\nOptions:\n\ndavrods_server: for annotation of eLabJournal data\nui_tabs: configure which tabs are shown (Browser and Info tabs always are)\n\ntabUpDownload: a two-pane upload/download tab\ntabELNData: for the Electronic Lab Notebook, eLabJournal\ntabDataBundle: (un)bundle datasets from/to four supported formats\ntabCreateTicket: create iRODS tickets for anonymous access\n\nforce_unknown_free_space: ignore if resources’ free space is unannotated\n\nThe force_unknown_free_space option is REQUIRED to be set to true if your default resource does not yet have its free space annotated. It makes unannotated top-level resources visible in the drop-downs allowing selection of them. In addition, it sets the force flag for uploads overriding resource overflow protection.\nThe logs for both GUI and CLI clients can be found in the ~/.ibridges/ directory/folder."
  },
  {
    "objectID": "docs/getting-started.html#usage",
    "href": "docs/getting-started.html#usage",
    "title": "iBridges configuration",
    "section": "Usage",
    "text": "Usage\nexport PYTHON_IRODSCLIENT_DEFAULT_XML=QUASI_XML\n./irods-iBridgesGui.py"
  },
  {
    "objectID": "docs/getting-started.html#irods-server-dependencies",
    "href": "docs/getting-started.html#irods-server-dependencies",
    "title": "iBridges configuration",
    "section": "iRODS server dependencies",
    "text": "iRODS server dependencies\n\nStorage capacity\nTo protect the iRODS resources from overflowing you should install an event hook on the iRODS servers that fill the resources’ RESC_FREE_SPACE attribute in the iCAT. These can be either catalog or resource servers. Please add the following to the /etc/irods/core.re or another rule engine file:\n\n\n\n\n\n\nExample storage capacity rule\n\n\n\n\n\n######################################################\n# Storage capacity policies.\n# Update the metadata field free_space of the resource\n# when data is moved there or deleted from it.\n#\n# Author: Christine Staiger (2021)\n#######################################################\n\nacPostProcForParallelTransferReceived(*leaf_resource) {\n    msiWriteRodsLog(\"LOGGING: acPostProcForParallelTransferReceived\", *Status);\n    msi_update_unixfilesystem_resource_free_space(*leaf_resource);\n}\n\nacPostProcForDataCopyReceived(*leaf_resource) {\n    msiWriteRodsLog(\"LOGGING: acPostProcForDataCopyReceived\", *Status);\n    msi_update_unixfilesystem_resource_free_space(*leaf_resource);\n}\n\n# for iput\nacPostProcForPut {\n    msi_update_unixfilesystem_resource_free_space($KVPairs.rescName);\n}\n\n# for storage update after irmtrash\nacPostProcForDelete {\n    msi_update_unixfilesystem_resource_free_space($KVPairs.rescName);\n}\nFor very busy systems, updating this value for every upload or delete can be prevented by commenting out or removing the last two stanzas if performance is being hampered.\n\n\n\nFor more complex resource hierarchies, the top of the resource tree (the root node) will usually not be updated with the free space values, but if it is (the sum of all leaf nodes is asssumed), the value in any leaf nodes will be ignored. If the root node has no free space value, the sum of the leaf nodes will be used instead. If none of the resource nodes are annotated, an error will occur. This feature can be overridden by annotating the root node’s free space value with an arbitrarily large value. Please note, that this action disables the built-in protection offered by this client.\n\n\nData (un)bundling\niRODS 4.2.x currently has no support for compressed structured files outside the iCommand ibun. Therefore, without custom microservices installed on a given iRODS server, only uncompressed TAR files are supported.\n\nTAR file format\nThe ibun help gives the example to use the -C option to change into the directory containing the potential contents of the TAR file. The bundling done with iBridges assumes this same format and creates TAR files likewise. For example bundling the contents of the collection /testZone/home/user/testColl containing:\n/testZone/home/user/testColl/file1.ext\n/testZone/home/user/testColl/file2.ext\n/testZone/home/user/testColl/file3.ext\nstores only the three data objects:\nfile1.ext\nfile2.ext\nfile3.ext\ninto /testZone/home/user/testColl.tar. Unbundling this data object recreates the /testZone/home/user/testColl collection if it does not exist and deposits the data objects into it. If there are already data objects or collections existing there, an error will result and the bundle will not be extracted.\n\n\n(Un)bundle options\niBridges has one option for (un)bundling data: Force operations. If the option is checked, two types of operations will be forced: one is to overwrite a bundle/collection that already exists, and the other is to remove the bundle files or collection contents without first sending them to the bin. If this behavior is undesirable, DO NOT USE THIS FORCE OPTION.\nIt is recommended that any kind of destructive actions be done in a separate step."
  },
  {
    "objectID": "docs/commandlineclient.html",
    "href": "docs/commandlineclient.html",
    "title": "",
    "section": "",
    "text": "The iBridges CLI is a commandline interface to up and download large amounts of data. It only updates data when necessary, i.e. if checksums of files differ.\n\n\n\nMinimal configuration file for uploading data to iRODs:\n\n[iRODS]\nirodsenv = /<path to>/irods_environment.json\nirodscoll =\nirodsresc =\nwebdav =\n\nConfiguration file for downloading data from iRODS:\n\n[iRODS]\nirodsenv = /<path to>/irods_environment.json\nirodscoll =\nirodsresc =\nwebdav =\n\n[DOWNLOAD]\npath = /path/to/download/directory\n\nConfiguration files for uploading data to iRODS and linking them to ElabJournal experiment:\n\n  [iRODS]\n  irodsenv = /<path to>/irods_environment.json\n  irodscoll =\n  irodsresc = bigstore\n  webdav = http://scomp1486.wurnet.nl\n\n  [ELN]\n  token = wur.elabjournal.com;<some hash>\n  group =\n  experiment =\n  title =\n\n\n\n./irods-iBridgesCli.py -h\n./irods-iBridgesCli -c </path/to/config> -d </path/to/folder/or/file/to/upload>\n./irods-iBridgesCli.py -c </path/to/config> -i </zone/home/path/to/coll/or/obj>"
  },
  {
    "objectID": "iBridgesGui-HowTo.html",
    "href": "iBridgesGui-HowTo.html",
    "title": "",
    "section": "",
    "text": "The iBridgesGui is a GUI to an Data management platform based on iRODS. It exposes iRODS functionality through a GUI to the users. We divided the different function into groups where each function group is represented in an own tab in the GUI. The tabs are configured for the user depending on the user’s rights and role in the Data management platform. - The Browser is a tool to browse through iRODS collections and gather information on iRODS data objects - The Up and Download tab gives tools to up and download large data safely. - The ELN Data upload tab is made for specific data uploads that belong to an Experiment described in an ElabJournal instance. - In the Compress/bundle data tab the user is given tools to bundle (tar) or compress (zip) iRODS data collections and to extract them again.\n\n\n\n\n\nHow to Download\n\n\nTo browse through your data collections in iRODS click on the Browser tab.\n\nNavigation bar: Type a valid collection or object path in and hit enter.\nCollection and data object table:\n\nClick on the Name of a collection or option. This will load the tabs below the table (see below)\nDouble click on a collection to navigate into the collection\n\nLower tabs\n\nPreview: Lists the content of a collection or the first 50 lines of textual data (.txt, .json, .csv)\nMetadata: You can annotate collections and data objects with own annotation key, value, unit. The keys and values can be used in the search-drop down menu to look for data\nPermissions: Will show the permissions own(er), read, write. If you have the role of data steward, you will also be able to change and add permissions\nResources: The tab shows on which storage resource data objects are stored. Note, collections do not have a resource.\nDelete: In the browser table click on the collection or object you want to delete, then click Load and then Delete. This will delete a whole collection with all its members or the data object.\n\n\nNote: The File Upload and File download buttons are only meant for uploading and downloading small single files. For large data transfers click on the Up and Download tab.\n\n\n\n\n\nHow to Download\n\n\n\nSelect the iRODS collection or data object to download and the folder to download to.\nPress the download button. A pop up window opens and the difference between the source and destination is calculated: - Based on checksums, a unique hash for each file the GUI determines whether the source file and the destination file are identical. If so, the file will not be downloaded again. The GUI will only download data which does not exist or differs.\n\nThe GUI also computes the total size of the data objects and will only start the download if the total amount will fit on your destination file system.\n\n\n\n\n\nDownload dialog\n\n\nWhen the check is done the loading screen disappears and the number of files which exist with a different checksum (1) and files which only exist on iRODS (2) will be indicated. Press the Download button to start the file transfer. iRODS automatically checks the checksum to ensure all downloaded files are complete.\n\n\n\n\n\n\n\nHow to Download\n\n\n\nCheck the resource. There may be several storage resources configured for you in the system. Your iRODS admin will give you advice which one to use for which data and workflow. Note, that archive resources are made to archive large files. Please adhere for those resources to the following policy:\n\nFiles need to be 1GB or larger.\nDo not start calculations on data which is stored on archive resources. They have a low latency and will inhibit your program. Your iRODS administrator can help you to migrate the data to a suited resources in that case.\n\nSelect the local file or folder and iRODS collection to upload to.\nPress the upload button. As in the download, a pop up window will appear which will execute the same checks as for the data downloads.\n\n\n\n\nDownload dialog\n\n\n\n\n\nYou can bundle a collection that contains small files into one large tar file or even compress a collection into a zip file. Those files can then be safely put on the archive resources or, in case of zip, be used to reduce storage space.\n\n\n\nHow to Compress\n\n\n\nSelect the collection you want to compress\nSelect the storage resource on which the compressed or bundled data should be stored\nCheck Compress data to create a zip-file. If unchecked, a tar-file will be created\nCheck Remove collection if you just want to keep the tar or zip file.\nThe Create tar/zip compress the data into the file <collection_name>.irods.tar or <collection_name>.irods.zip\n\nNote, all you metadata will be preserved too and restored upon extraction.\n\n\n\n\n\n\nHow to Compress\n\n\nPartial extract of data:\n\nSelect the *.irods.tar or *.irods.zip file.\nSelect the resource where the data should be extracted to.\nUse the Index button to get an overview of the files inside the tarred file. The JSON tab will show the whole data package in JSON format including accession rights and metadata. Select the files you want to extract and click on Extract Selected. This schedules a job on the iRODS server which will extract the data. Note, that this might take a while. Close the window and navigate to the browser to see whether the data is restored.\n\n\n\nClick on Options in the menu bar of the window and select Search. This will open a mask to search for data objects and collections using metadata key-value pairs, collection paths and data object paths.\nThe Select and Close button will load the selected collections and objects into the Browser tab where you can further inspect and annotate the data."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "iBridges",
    "section": "",
    "text": "Welcome\nThis page provides user and developer documentation of the iBridges iRODS client. Get started using the links below!\n\nWhat is iBridges\nGetting started\nUser guide\nCommand line tool\nDeveloper guide\nRoadmap and known issues"
  },
  {
    "objectID": "README_CLI.html",
    "href": "README_CLI.html",
    "title": "",
    "section": "",
    "text": "Python3\nDependencies for elabJournal:\n\n# sudo apt-get install build-essential libssl-dev libffi-dev python3-dev cargo\npip install elabjournal\n\nDependencies for iRODS:\n\npip install python-irodsclient\n\n\n\n\nMinimal configuration file for uploading data to iRODs:\n\n[iRODS]\nirodsenv = /<path to>/irods_environment.json\nirodscoll = \nirodsresc = \nwebdav = \n\nConfiguration file for downloading data from iRODS:\n\n[iRODS]\nirodsenv = /<path to>/irods_environment.json\nirodscoll = \nirodsresc = \nwebdav = \n\n[DOWNLOAD]\npath = /path/to/download/directory\n\nConfiguration files for uploading data to iRODS and linking them to ElabJournal experiment:\n\n  [iRODS]\n  irodsenv = /<path to>/irods_environment.json\n  irodscoll = \n  irodsresc = bigstore\n  webdav = http://scomp1486.wurnet.nl\n  \n  [ELN]\n  token = wur.elabjournal.com;<some hash>\n  group =\n  experiment =\n  title =\n\n\n\n./irods-iBridgesCli.py -h\n./irods-iBridgesCli -c </path/to/config> -d </path/to/folder/or/file/to/upload>\n./irods-iBridgesCli.py -c </path/to/config> -i </zone/home/path/to/coll/or/obj>"
  }
]