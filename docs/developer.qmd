# Developer guide

## Submitting issues
If you want to report a bug, please make sure to mention:

- Software version or branch you are working on
- Python version and iRODS server version
- `python-irodsclient` version
- Steps to reproduce the behaviour
- Expected behaviour

If you have an idea for a new feature, please let us also know through an issue.

<p align="center">
  <p align="center">
    <a href="https://github.com/chStaiger/iBridges-Gui/issues">Report Bug or Request Feature</a>
    .
  </p>
</p>

## Extending iBridges: Create own tab
Each tab in the GUI is an own class. If you want to create your own tab, please follow the steps below.

::: {.callout-note collapse="true"}
### 1. Create a ui-file
To help you to create a nice layout of the new tab we recommend to use the QT-designer. Please choose **Qt Designer Form** and the template **Widget**. 

![](../screenshots/create-ui-file.png){fig-align="center" height=300}

Set the **Path** to *\<iBridges-Gui/gui/ui-files\>* 

To ensure the same color theme, right-click on **Form** and choose change the stylesheet.

![](../screenshots/colortheme-ui-file.png){fig-align="center" width=300}

Copy the following text over to the window.

```py
QWidget
{
    background-color: rgb(54, 54, 54);
    color: rgb(86, 184, 139);
    border-color: rgb(217, 174, 23);
}

QLineEdit
{
    background-color: rgb(85, 87, 83);
    border-color: rgb(217, 174, 23);
}

QTreeView
{
background-color: rgb(85, 87, 83);
}

QLabel#error_label
{
    color: rgb(217, 174, 23);
}
```

The *errorLabel* is a specific object, while the settings for *Qwidget*, *QLineEdit* and *QTreeView* are valid for all objects of that type.

Now you can design your new form. In our example the form contains a placeholder for the iRODS tree, a text field (green text) and an error label (yellow text).


![](../screenshots/layout-ui-file.png){fig-align="center" height=300}

In the designer you also set the variable names of the objects. These will be used in the Python code, so make sure they are meaningful to you.

![](../screenshots/variables-ui-file.png){fig-align="center"}

:::

::: {.callout-note collapse="true"}
### 2. Convert the ui-file into Python code
Convert the ui-file to Python file with:

```py
cd iBridges-Gui
python -m PyQt6.uic.pyuic -x gui/ui_files/ExampleTab.ui -o gui/ui_files/ExampleTab.py
```
In some cases a standard class name is set in the Python file.

```py
# Form implementation generated from reading ui file 'gui/ui_files/example_tab.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        ...
```
You can change the class name *Ui_Form* to something more meaningful. In this example, we rename the class to **Ui_ExampleTab**.

We provide a full example file in [*iBridges-Gui/gui/IrodsExampleTab.py*](https://github.com/chStaiger/iBridges-Gui/blob/master/gui/IrodsExampleTab.py).

This is the minimum code you need to initialise the new tab in the GUI:

```py
import logging
import sys

import PyQt6.QtCore
import PyQt6.QtGui
import PyQt6.QtWidgets
import PyQt6.uic

import gui
import meta
import utils

class IrodsExampleTab(PyQt6.QtWidgets.QWidget,
                      gui.ui_files.ExampleTab.Ui_ExampleTab):
    context = utils.context.Context()
    def __init__(self):
        super().__init__()
        if getattr(sys, 'frozen', False):
            super().setupUi(self)
        else:
            PyQt6.uic.loadUi("gui/ui_files/ExampleTab.ui", self)
        self.error_label.setText("Whooohoo")
```

For the software package to find the layout for the new tab, we need to add it to the *iBridges-Gui/gui/ui_files/__init__.py*.
Add the line:

```py
from . import IrodsExampleTab
```
:::

::: {.callout-note collapse="true"}
### 3. Integrate the new tab into iBridges
- Create a new Python class *iBridges-Gui/gui/IrodsExampleTab.py*
- Add `from . import IrodsExampleTab` to *iBridges-Gui/gui/__init__.py*

:::

::: {.callout-note collapse="true"}
### 4. Integrate the new tab class into *mainmenu.py*
In the file *iBridges-Gui/gui/mainmenu.py* you will find the dictionary `ui_tabs_lookup`. The dictionary maps from `<tabname>` (as used in *ibridges_config.json*) to a function in mainmeny.py which initialises the tab.
First we will add the new name:

```py
ui_tabs_lookup = {
    'tabBrowser': self.setupTabBrowser,
    ...
    'tabInfo': self.setupTabInfo,
    'tabExample': self.setupTabExample
}
```

Now we need to write the function `setupTabExample`
Add the new function `setupTabBrowser`:

```py
    def setupTabExample(self):
        self.exampleTab = gui.ExampleTab.ExampleTab()
        self.tabWidget.addTab(self.exampleTab, 'Example')
```
Don't forget to add the new keyword to the tabs in your *ibridges_config.json*

Now the new tab should appear as a tab in the application and we can continue defining its behaviour.
:::

::: {.callout-note collapse="true"}
### 5. Defining the functionality of the new tab

You might have observed that we already defined a variable `context` as a global variable. The class `utils.context.Context` contains all parameters from the *irods_environment.json* and *ibridges_config.json*, stored as `utils.json_config.JSONConfig` objects along with some extra context information and functionality.

```py
import utils
context = utils.context.Context()
dir(context)

[
 'application_name',
 'ibridges_conf_file',
 'ibridges_configuration',
 'ienv_is_complete',
 'irods_env_file',
 'irods_environment',
 'reset',
 'save_ibridges_configuration',
 'save_irods_environment']
```
The class `Context` is a singleton, i.e. no matter how often you instantiate a `Context` object there will always and only be one object in memory.

```py
context = utils.context.Context()
context1 = utils.context.Context()

context == context1
True
``` 

That also means that if you change the values in the object, all other classes using `Context` will have the same information.

Another singleton class `IrodsConnector` contains all functionality to interact with the iRODS server.

With all that you can define the functionality of the tab like in the [example we provide](https://github.com/chStaiger/iBridges-Gui/blob/master/gui/IrodsExampleTab.py).

:::



::: {.callout-note collapse="true"}
### 6. Path handling in iRODS

iRODS paths of data objects and collections are given as strings:

```py
import irodsConnector
import utils
conn = irodsConnector.manager.IrodsConnector()
context = utils.context.Context()
context.irods_env_file = '~/.irods/irods_environment.json'
conn.password = "************"
conn.connect()
coll = conn.data_op.get_collection("/<zone>/home/<coll_name>")

type(coll.path)
str
```

The class `utils.path.iRODSPath` (derived from `str`) casts a string into a pure POSIX path that has no file system functionality. We also offer the complementary functionality for local paths in `utils.path.LocalPath`. The setting of the `context.irods_env_file` property utilizes this class and resolves the user's home directory (`~/`) automatically on _all_ platforms.

```py
dir(utils.path.iRODSPath)

['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 
'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 
'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 
'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 
'joinpath', ...]
 
 ```

:::

## Contributing to the code base
If you want to contribute to the iBridges code base, you can submit pull requests.

